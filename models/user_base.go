// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserBase user base
//
// swagger:discriminator UserBase UserBase
type UserBase interface {
	runtime.Validatable

	// user role
	// Enum: [admin member]
	Role() *string
	SetRole(*string)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type userBase struct {
	roleField *string
}

// Role gets the role of this polymorphic type
func (m *userBase) Role() *string {
	return m.roleField
}

// SetRole sets the role of this polymorphic type
func (m *userBase) SetRole(val *string) {
	m.roleField = val
}

// UnmarshalUserBaseSlice unmarshals polymorphic slices of UserBase
func UnmarshalUserBaseSlice(reader io.Reader, consumer runtime.Consumer) ([]UserBase, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []UserBase
	for _, element := range elements {
		obj, err := unmarshalUserBase(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalUserBase unmarshals polymorphic UserBase
func UnmarshalUserBase(reader io.Reader, consumer runtime.Consumer) (UserBase, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalUserBase(data, consumer)
}

func unmarshalUserBase(data []byte, consumer runtime.Consumer) (UserBase, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the UserBase property.
	var getType struct {
		UserBase string `json:"UserBase"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("UserBase", "body", getType.UserBase); err != nil {
		return nil, err
	}

	// The value of UserBase is used to determine which type to create and unmarshal the data into
	switch getType.UserBase {
	case "UserBase":
		var result userBase
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "UserCreateDto":
		var result UserCreateDto
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "UserDto":
		var result UserDto
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "UserUpdateDto":
		var result UserUpdateDto
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid UserBase value: %q", getType.UserBase)
}

// Validate validates this user base
func (m *userBase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var userBaseTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["admin","member"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userBaseTypeRolePropEnum = append(userBaseTypeRolePropEnum, v)
	}
}

const (

	// UserBaseRoleAdmin captures enum value "admin"
	UserBaseRoleAdmin string = "admin"

	// UserBaseRoleMember captures enum value "member"
	UserBaseRoleMember string = "member"
)

// prop value enum
func (m *userBase) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userBaseTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *userBase) validateRole(formats strfmt.Registry) error {

	if swag.IsZero(m.Role()) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", *m.Role()); err != nil {
		return err
	}

	return nil
}
