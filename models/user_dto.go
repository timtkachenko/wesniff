// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserDto user dto
//
// swagger:model UserDto
type UserDto struct {
	roleField *string

	// email
	Email string `json:"email"`

	// user id
	ID string `json:"id"`
}

// Role gets the role of this subtype
func (m *UserDto) Role() *string {
	return m.roleField
}

// SetRole sets the role of this subtype
func (m *UserDto) SetRole(val *string) {
	m.roleField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *UserDto) UnmarshalJSON(raw []byte) error {
	var data struct {

		// email
		Email string `json:"email"`

		// user id
		ID string `json:"id"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Role *string `json:"role,omitempty"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result UserDto

	result.roleField = base.Role

	result.Email = data.Email
	result.ID = data.ID

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m UserDto) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// email
		Email string `json:"email"`

		// user id
		ID string `json:"id"`
	}{

		Email: m.Email,

		ID: m.ID,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Role *string `json:"role,omitempty"`
	}{

		Role: m.Role(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this user dto
func (m *UserDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var userDtoTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["admin","member"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userDtoTypeRolePropEnum = append(userDtoTypeRolePropEnum, v)
	}
}

// property enum
func (m *UserDto) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userDtoTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserDto) validateRole(formats strfmt.Registry) error {

	if swag.IsZero(m.Role()) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", *m.Role()); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserDto) UnmarshalBinary(b []byte) error {
	var res UserDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
