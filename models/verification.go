// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Verification verification
//
// swagger:model Verification
type Verification struct {

	// acceptance time
	AcceptanceTime string `json:"acceptanceTime,omitempty"`

	// additional verified data
	AdditionalVerifiedData *AdditionalVerifiedData `json:"additionalVerifiedData,omitempty"`

	// code
	Code int64 `json:"code,omitempty"`

	// comments
	Comments []string `json:"comments"`

	// decision time
	DecisionTime string `json:"decisionTime,omitempty"`

	// document
	Document *Document `json:"document,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// person
	Person *Person `json:"person,omitempty"`

	// reason
	Reason string `json:"reason,omitempty"`

	// reason code
	ReasonCode string `json:"reasonCode,omitempty"`

	// risk labels
	RiskLabels []*RiskLabel `json:"riskLabels"`

	// status
	Status string `json:"status,omitempty"`

	// technical data
	TechnicalData *VerificationTechnicalData `json:"technicalData,omitempty"`

	// vendor data
	VendorData string `json:"vendorData,omitempty"`
}

// Validate validates this verification
func (m *Verification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalVerifiedData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDocument(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerson(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRiskLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTechnicalData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Verification) validateAdditionalVerifiedData(formats strfmt.Registry) error {

	if swag.IsZero(m.AdditionalVerifiedData) { // not required
		return nil
	}

	if m.AdditionalVerifiedData != nil {
		if err := m.AdditionalVerifiedData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("additionalVerifiedData")
			}
			return err
		}
	}

	return nil
}

func (m *Verification) validateDocument(formats strfmt.Registry) error {

	if swag.IsZero(m.Document) { // not required
		return nil
	}

	if m.Document != nil {
		if err := m.Document.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("document")
			}
			return err
		}
	}

	return nil
}

func (m *Verification) validatePerson(formats strfmt.Registry) error {

	if swag.IsZero(m.Person) { // not required
		return nil
	}

	if m.Person != nil {
		if err := m.Person.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("person")
			}
			return err
		}
	}

	return nil
}

func (m *Verification) validateRiskLabels(formats strfmt.Registry) error {

	if swag.IsZero(m.RiskLabels) { // not required
		return nil
	}

	for i := 0; i < len(m.RiskLabels); i++ {
		if swag.IsZero(m.RiskLabels[i]) { // not required
			continue
		}

		if m.RiskLabels[i] != nil {
			if err := m.RiskLabels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("riskLabels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Verification) validateTechnicalData(formats strfmt.Registry) error {

	if swag.IsZero(m.TechnicalData) { // not required
		return nil
	}

	if m.TechnicalData != nil {
		if err := m.TechnicalData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("technicalData")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Verification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Verification) UnmarshalBinary(b []byte) error {
	var res Verification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VerificationTechnicalData verification technical data
//
// swagger:model VerificationTechnicalData
type VerificationTechnicalData struct {

	// ip
	IP string `json:"ip,omitempty"`
}

// Validate validates this verification technical data
func (m *VerificationTechnicalData) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VerificationTechnicalData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VerificationTechnicalData) UnmarshalBinary(b []byte) error {
	var res VerificationTechnicalData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
