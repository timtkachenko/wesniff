// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EventBaseDto event base dto
//
// swagger:model EventBaseDto
type EventBaseDto struct {
	statusField string

	verificationField *Verification
}

// Status gets the status of this subtype
func (m *EventBaseDto) Status() string {
	return m.statusField
}

// SetStatus sets the status of this subtype
func (m *EventBaseDto) SetStatus(val string) {
	m.statusField = val
}

// Verification gets the verification of this subtype
func (m *EventBaseDto) Verification() *Verification {
	return m.verificationField
}

// SetVerification sets the verification of this subtype
func (m *EventBaseDto) SetVerification(val *Verification) {
	m.verificationField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *EventBaseDto) UnmarshalJSON(raw []byte) error {
	var data struct {
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Status string `json:"status,omitempty"`

		Verification *Verification `json:"verification,omitempty"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result EventBaseDto

	result.statusField = base.Status

	result.verificationField = base.Verification

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m EventBaseDto) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
	}{})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Status string `json:"status,omitempty"`

		Verification *Verification `json:"verification,omitempty"`
	}{

		Status: m.Status(),

		Verification: m.Verification(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this event base dto
func (m *EventBaseDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVerification(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventBaseDto) validateVerification(formats strfmt.Registry) error {

	if swag.IsZero(m.Verification()) { // not required
		return nil
	}

	if m.Verification() != nil {
		if err := m.Verification().Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verification")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EventBaseDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventBaseDto) UnmarshalBinary(b []byte) error {
	var res EventBaseDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
