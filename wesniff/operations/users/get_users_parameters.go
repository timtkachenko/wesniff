// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetUsersParams creates a new GetUsersParams object
// no default values defined in spec.
func NewGetUsersParams() GetUsersParams {

	return GetUsersParams{}
}

// GetUsersParams contains all the bound params for the get users operation
// typically these are obtained from a http.Request
//
// swagger:parameters getUsers
type GetUsersParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*?limit=10,20
	  In: query
	*/
	Limit []int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetUsersParams() beforehand.
func (o *GetUsersParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindLimit binds and validates array parameter Limit from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetUsersParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {

	var qvLimit string
	if len(rawData) > 0 {
		qvLimit = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	limitIC := swag.SplitByFormat(qvLimit, "")
	if len(limitIC) == 0 {
		return nil
	}

	var limitIR []int64
	for i, limitIV := range limitIC {
		limitI, err := swag.ConvertInt64(limitIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "limit", i), "query", "int64", limitI)
		}

		limitIR = append(limitIR, limitI)
	}

	o.Limit = limitIR

	return nil
}
